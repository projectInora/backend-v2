security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_USER: [ROLE_USER]
        ROLE_BOAT_OWNER: [ROLE_USER]
        ROLE_BUYER: [ROLE_USER]
        ROLE_SELLER: [ROLE_BUYER]
        ROLE_CATCHING_CENTER_USER: [ROLE_SELLER]
        ROLE_CATCHING_CENTER_ADMIN: [ROLE_CATCHING_CENTER_USER]
        ROLE_PROCESSING_CENTER_ADMIN: [ROLE_BUYER]
        ROLE_SYSTEM_ADMIN: [ROLE_PROCESSING_CENTER_ADMIN,ROLE_CATCHING_CENTER_ADMIN,ROLE_BOAT_OWNER]
        ROLE_SUPER_ADMIN: [ROLE_SYSTEM_ADMIN]

    providers:
        app_user_provider:
            entity:
                class: App\Entity\Authentication\AuthUser
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_token:
            pattern: ^/token$
            security: false

        web_admin_api:
            pattern: ^/internal-api/v1/web-admin
            security: false
            stateless: true

        main:
            lazy: true
            provider: app_user_provider

    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
